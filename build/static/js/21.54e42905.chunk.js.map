{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","pages/report/revenureport/Revenureport.js","pages/report/clientreport/TeamLeadwise.js","pages/report/clientreport/Datewise.js","pages/report/clientreport/Monthcount.js","pages/report/clientreport/Todaycount.js","pages/report/clientreport/ClientReportNav.js","pages/report/ViewRequirement.js","pages/report/Report.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","urlpattern","config","baseUrl","defaultSorted","dataField","order","sizePerPageRenderer","options","currSizePerPage","onSizePerPageChange","Fragment","className","Input","type","name","id","defaultValue","onChange","e","target","map","option","idx","text","TableWithSearch","props","useState","rowData","setrowData","rowEvent","onDoubleClick","row","alert","console","log","NoDataIndication","bootstrap4","keyField","data","records","columns","search","baseProps","bordered","rowEvents","noDataIndication","pagination","paginationFactory","sizePerPage","sizePerPageList","length","Revenureport","datewise","setdatewise","loginDetails","useSelector","state","Auth","user","startdate","setstartdate","enddate","setenddate","onSubmit","getUsername","Username","preventDefault","axios","get","response","setdatelist","Data","Row","Col","md","event","hidden","sort","TeamLeadwise","dispatch","useDispatch","teamleadwise","setteamleadwise","teamlead","setteamlead","teamLeadList","TeamLead","useEffect","getTeamLeadList","setteamleadlist","selected","desabled","teamLead","i","EFullname","Datewise","SearchBar","Search","searchProps","Monthcount","monthrecord","setmonthRecord","getMonthReport","$","ajax","url","dataType","success","allmonthrecord","Todaycount","todayrecord","settodayRecord","getTodayReport","alltodayrecord","ClientReportNav","activeTab","setActiveTab","toggle","tab","Nav","tabs","NavItem","NavLink","classnames","active","onClick","TabContent","TabPane","tabId","ExportCSVButton","CSVExport","modal","setModal","file","setFile","handleSubmit","a","uploadFile","res","formData","FormData","append","post","headers","handleOnChange","files","UncontrolledDropdown","DropdownToggle","data-toggle","tag","DropdownMenu","right","csvProps","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Button","color","class","ViewRequirement","Report","reqreport","getReqReportList","PageTitle","breadCrumbItems","label","path"],"mappings":"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","file":"static/js/21.54e42905.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Row, Col, Input } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport config from '../../../helpers/baseurl';\r\nimport axios from 'axios';\r\n\r\n\r\nvar urlpattern =config.baseUrl;\r\n\r\n\r\nconst defaultSorted = [\r\n    {\r\n        dataField: 'id',\r\n        order: 'asc',\r\n    },\r\n];\r\n// /const { ExportCSVButton } = CSVExport;\r\nconst sizePerPageRenderer = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <React.Fragment>\r\n        <label className=\"d-inline mr-1\">Show</label>\r\n        <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"no-entries\"\r\n            className=\"custom-select custom-select-sm d-inline col-2\"\r\n            defaultValue={currSizePerPage}\r\n            onChange={(e) => onSizePerPageChange(e.target.value)}>\r\n            {options.map((option, idx) => {\r\n                return <option key={idx}>{option.text}</option>;\r\n            })}\r\n        </Input>\r\n        <label className=\"d-inline ml-1\">Entry</label>\r\n    </React.Fragment>\r\n);\r\n\r\nconst TableWithSearch = (props) => {\r\n    //const { SearchBar } = Search;\r\n    //const dispatch = useDispatch();\r\n    const [rowData, setrowData] = useState([]);\r\n    //const [rowSelect, setrowSelect] = useState([]);\r\n    \r\n      const rowEvent = {\r\n        onDoubleClick: (row) => {\r\n            alert();\r\n                setrowData((rowData) => [...rowData, row]);\r\n                console.log(\"rowdata\", rowData)\r\n              \r\n        }\r\n    }\r\n    const NoDataIndication = () => (\r\n        <div className=\"spinner\">\r\n          <div className=\"rect1\" />\r\n          <div className=\"rect2\" />\r\n          <div className=\"rect3\" />\r\n          <div className=\"rect4\" />\r\n          <div className=\"rect5\" />\r\n        </div>\r\n      );\r\n    return (\r\n            \r\n                <ToolkitProvider bootstrap4 keyField=\"ROW_NUMBER\" data={props.records} columns={props.columns} search>\r\n                    {(props) => (\r\n                        <React.Fragment>\r\n                            {/* <Row>\r\n                                <Col md={6} className=\"\">\r\n                                    <SearchBar {...props.searchProps} />\r\n                                </Col>                    \r\n                            </Row> */}\r\n                            \r\n\r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                bordered={false}\r\n                                defaultSorted={defaultSorted}\r\n                                rowEvents={rowEvent}\r\n                                noDataIndication={ () => <NoDataIndication /> }\r\n                                pagination={\r\n                                    paginationFactory( \r\n                                        { \r\n                                            sizePerPage: 10, \r\n                                            sizePerPageRenderer: sizePerPageRenderer, \r\n                                            sizePerPageList: [\r\n                                                { text: '10', value: 10, }, \r\n                                                { text: '20', value: 20 }, \r\n                                                { text: '50', value: 50 }, \r\n                                                { text: 'Todos', value: ( props.records ? props.records.length : 0 ) }\r\n                                            ] \r\n                                        } \r\n                                    )\r\n                                }\r\n                                \r\n                            />\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n    );\r\n};\r\n\r\nconst Revenureport = () => {\r\n\r\n    const [datewise, setdatewise]=useState([]);\r\n    let loginDetails = useSelector((state)=> state.Auth.user || []);\r\n    const [startdate, setstartdate]=useState('');\r\n    const [enddate, setenddate]=useState('');\r\n    // useEffect(() => {\r\n    //     //dispatch(getTeamLeadList());\r\n    //      // eslint-disable-next-line \r\n    //  }, []);\r\n    const handleDatewiseForm = (e) => {\r\n        var getUsername = loginDetails.Username;\r\n    e.preventDefault();\r\n    axios\r\n        .get(`${urlpattern}RevenueReportDateWise?username=${getUsername}&ssd=${startdate}&eed=${enddate}`)\r\n\r\n        .then((response) => {\r\n           var setdatelist=response.data.Data;\r\n           setdatewise(setdatelist);\r\n        });\r\n};\r\nlet records = datewise || [];\r\n\r\n    const columns = [\r\n        {\r\n            dataField:'id',\r\n            text:'ID',\r\n            hidden: true\r\n        },\r\n        {\r\n            dataField: 'Name',\r\n            text: 'Name.',\r\n            //sort: true,\r\n        },\r\n        {\r\n            dataField: 'Client',\r\n            text: 'Client',\r\n            sort: true,\r\n        },\r\n        {\r\n            dataField: 'Location',\r\n            text: 'Location',\r\n        },\r\n        {\r\n            dataField: 'Skill',\r\n            text: 'Skill',\r\n        },\r\n        {\r\n            dataField: 'Type',\r\n            text: 'Type',\r\n        },\r\n        {\r\n            dataField: 'CTC',\r\n            text: 'CTC',\r\n        },\r\n        {\r\n            dataField: 'DR',\r\n            text: 'DR',\r\n        },\r\n        {\r\n            dataField: 'PR',\r\n            text: 'PR',\r\n        },\r\n        {\r\n            dataField: 'GP',\r\n            text: 'GP',\r\n        },\r\n        {\r\n            dataField: 'GPM',\r\n            text: 'GPM',\r\n        },\r\n        {\r\n            dataField: 'Recruiter',\r\n            text: 'Recruiter',\r\n        }\r\n    ]\r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleDatewiseForm}>\r\n            <Row className=\"mt-3\">\r\n                            <Col md={3} className=\"\">\r\n                                    <input type=\"date\" className=\"form-control style-input\"\r\n                                     onChange={(event) => setstartdate(event.target.value)}/>\r\n                                </Col>   \r\n                                <Col md={3} className=\"\">\r\n                                    <input type=\"date\" className=\"form-control style-input\"\r\n                                     onChange={(event) => setenddate(event.target.value)}/>\r\n                                </Col>   \r\n                                <Col md={3} className=\"\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Search</button>\r\n                                </Col>                     \r\n                            </Row>\r\n            </form>\r\n            <Row>\r\n                <Col>\r\n                    <TableWithSearch records={records} columns={columns} />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Revenureport;\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col, Input } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport { getTeamLeadList } from '../../../redux/teamLead/actions';\r\nimport axios from 'axios';\r\n//import PageTitle from '../../components/PageTitle';\r\n\r\nimport config from '../../../helpers/baseurl';\r\nvar urlpattern =config.baseUrl;\r\n\r\nconst defaultSorted = [\r\n    {\r\n        dataField: 'id',\r\n        order: 'asc',\r\n    },\r\n];\r\n// /const { ExportCSVButton } = CSVExport;\r\nconst sizePerPageRenderer = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <React.Fragment>\r\n        <label className=\"d-inline mr-1\">Show</label>\r\n        <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"no-entries\"\r\n            className=\"custom-select custom-select-sm d-inline col-2\"\r\n            defaultValue={currSizePerPage}\r\n            onChange={(e) => onSizePerPageChange(e.target.value)}>\r\n            {options.map((option, idx) => {\r\n                return <option key={idx}>{option.text}</option>;\r\n            })}\r\n        </Input>\r\n        <label className=\"d-inline ml-1\">Entry</label>\r\n    </React.Fragment>\r\n);\r\n\r\nconst TableWithSearch = (props) => {\r\n    //const { SearchBar } = Search;\r\n    //const dispatch = useDispatch();\r\n    const [rowData, setrowData] = useState([]);\r\n    //const [rowSelect, setrowSelect] = useState([]);\r\n    \r\n      const rowEvent = {\r\n        onDoubleClick: (row) => {\r\n            alert();\r\n                setrowData((rowData) => [...rowData, row]);\r\n                console.log(\"rowdata\", rowData)\r\n              \r\n        }\r\n    }\r\n    const NoDataIndication = () => (\r\n        <div className=\"spinner\">\r\n          <div className=\"rect1\" />\r\n          <div className=\"rect2\" />\r\n          <div className=\"rect3\" />\r\n          <div className=\"rect4\" />\r\n          <div className=\"rect5\" />\r\n        </div>\r\n      );\r\n    return (\r\n            \r\n                <ToolkitProvider bootstrap4 keyField=\"ROW_NUMBER\" data={props.records} columns={props.columns} search>\r\n                    {(props) => (\r\n                        <React.Fragment>\r\n                            {/* <Row>\r\n                                <Col md={6} className=\"\">\r\n                                    <SearchBar {...props.searchProps} />\r\n                                </Col>                    \r\n                            </Row> */}\r\n                            \r\n\r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                bordered={false}\r\n                                defaultSorted={defaultSorted}\r\n                                rowEvents={rowEvent}\r\n                                noDataIndication={ () => <NoDataIndication /> }\r\n                                pagination={\r\n                                    paginationFactory( \r\n                                        { \r\n                                            sizePerPage: 10, \r\n                                            sizePerPageRenderer: sizePerPageRenderer, \r\n                                            sizePerPageList: [\r\n                                                { text: '10', value: 10, }, \r\n                                                { text: '20', value: 20 }, \r\n                                                { text: '50', value: 50 }, \r\n                                                { text: 'Todos', value: ( props.records ? props.records.length : 0 ) }\r\n                                            ] \r\n                                        } \r\n                                    )\r\n                                }\r\n                                \r\n                            />\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n    );\r\n};\r\n\r\nconst TeamLeadwise = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [teamleadwise, setteamleadwise]=useState([]);\r\n    const [teamlead, setteamlead]=useState('');\r\n    const [startdate, setstartdate]=useState('');\r\n    const [enddate, setenddate]=useState('');\r\n    let teamLeadList = useSelector((state) => state.TeamLead.teamlead || []);\r\n    useEffect(() => {\r\n        dispatch(getTeamLeadList());\r\n         // eslint-disable-next-line \r\n     }, []);\r\n    const handleTeamLeadwiseForm = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n        .get(`${urlpattern}DatewiseTeamLeadCount?teamlead=${teamlead}&ssd=${startdate}&eed=${enddate}`)\r\n\r\n        .then((response) => {\r\n           var setteamleadlist=response.data.Data;\r\n           setteamleadwise(setteamleadlist);\r\n        });\r\n};\r\nlet records = teamleadwise || [];\r\n    const columns = [\r\n        {\r\n            dataField:'id',\r\n            text:'ID',\r\n            hidden: true\r\n        },\r\n        {\r\n            dataField: 'name',\r\n            text: 'Name.',\r\n            //sort: true,\r\n        },\r\n        {\r\n            dataField: 'submission',\r\n            text: 'Submission',\r\n            sort: true,\r\n        },\r\n        {\r\n            dataField: 'interview',\r\n            text: 'Interview',\r\n        },\r\n        {\r\n            dataField: 'offer',\r\n            text: 'Offer',\r\n        },\r\n        {\r\n            dataField: 'start',\r\n            text: 'Start',\r\n        }\r\n    ]\r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleTeamLeadwiseForm}>\r\n            <Row className=\"mt-3\">\r\n                            <Col md={3} className=\"\">\r\n                                    <select className=\"form-control style-input\"\r\n                                    onChange={(event) => setteamlead(event.target.value)}>\r\n                                       <option selected desabled>Select</option>\r\n                                    {teamLeadList.map((teamLead,i) => (\r\n                                    <option key={i++} value={teamLead.EFullname}>\r\n                                        {teamLead.EFullname}\r\n                                    </option>\r\n                                ))}\r\n                                    </select>\r\n                                </Col>   \r\n                            <Col md={3} className=\"\">\r\n                                    <input type=\"date\" className=\"form-control style-input\"\r\n                                    onChange={(event) => setstartdate(event.target.value)}/>\r\n                                </Col>   \r\n                                <Col md={3} className=\"\">\r\n                                    <input type=\"date\" className=\"form-control style-input\"\r\n                                    onChange={(event) => setenddate(event.target.value)}/>\r\n                                </Col>   \r\n                                <Col md={3} className=\"\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Search</button>\r\n                                </Col>                     \r\n                            </Row>\r\n            </form>\r\n            <Row>\r\n                <Col>\r\n                    <TableWithSearch records={records} columns={columns} />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default TeamLeadwise;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Row, Col, Input } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport config from '../../../helpers/baseurl';\r\nimport axios from 'axios';\r\n\r\nvar urlpattern =config.baseUrl;\r\n\r\nconst defaultSorted = [\r\n    {\r\n        dataField: 'id',\r\n        order: 'asc',\r\n    },\r\n];\r\n// /const { ExportCSVButton } = CSVExport;\r\nconst sizePerPageRenderer = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <React.Fragment>\r\n        <label className=\"d-inline mr-1\">Show</label>\r\n        <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"no-entries\"\r\n            className=\"custom-select custom-select-sm d-inline col-2\"\r\n            defaultValue={currSizePerPage}\r\n            onChange={(e) => onSizePerPageChange(e.target.value)}>\r\n            {options.map((option, idx) => {\r\n                return <option key={idx}>{option.text}</option>;\r\n            })}\r\n        </Input>\r\n        <label className=\"d-inline ml-1\">Entry</label>\r\n    </React.Fragment>\r\n);\r\n\r\nconst TableWithSearch = (props) => {\r\n   // const { SearchBar } = Search;\r\n    //const dispatch = useDispatch();\r\n    const [rowData, setrowData] = useState([]);\r\n    //const [rowSelect, setrowSelect] = useState([]);\r\n    \r\n      const rowEvent = {\r\n        onDoubleClick: (row) => {\r\n            alert();\r\n                setrowData((rowData) => [...rowData, row]);\r\n                console.log(\"rowdata\", rowData)\r\n              \r\n        }\r\n    }\r\n    const NoDataIndication = () => (\r\n        <div className=\"spinner\">\r\n          <div className=\"rect1\" />\r\n          <div className=\"rect2\" />\r\n          <div className=\"rect3\" />\r\n          <div className=\"rect4\" />\r\n          <div className=\"rect5\" />\r\n        </div>\r\n      );\r\n    return (\r\n            \r\n                <ToolkitProvider bootstrap4 keyField=\"ROW_NUMBER\" data={props.records} columns={props.columns} search>\r\n                    {(props) => (\r\n                        <React.Fragment>\r\n                            {/* <Row>\r\n                                <Col md={6} className=\"\">\r\n                                    <SearchBar {...props.searchProps} />\r\n                                </Col>                    \r\n                            </Row> */}\r\n                            \r\n\r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                bordered={false}\r\n                                defaultSorted={defaultSorted}\r\n                                rowEvents={rowEvent}\r\n                                noDataIndication={ () => <NoDataIndication /> }\r\n                                pagination={\r\n                                    paginationFactory( \r\n                                        { \r\n                                            sizePerPage: 10, \r\n                                            sizePerPageRenderer: sizePerPageRenderer, \r\n                                            sizePerPageList: [\r\n                                                { text: '10', value: 10, }, \r\n                                                { text: '20', value: 20 }, \r\n                                                { text: '50', value: 50 }, \r\n                                                { text: 'Todos', value: ( props.records ? props.records.length : 0 ) }\r\n                                            ] \r\n                                        } \r\n                                    )\r\n                                }\r\n                                \r\n                            />\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n    );\r\n};\r\n\r\nconst Datewise = () => {\r\n \r\n    //const dispatch = useDispatch();\r\n    const [datewise, setdatewise]=useState([]);\r\n    let loginDetails = useSelector((state)=> state.Auth.user || []);\r\n    const [startdate, setstartdate]=useState('');\r\n    const [enddate, setenddate]=useState('');\r\n    // useEffect(() => {\r\n    //     //dispatch(getTeamLeadList());\r\n    //      // eslint-disable-next-line \r\n    //  }, []);\r\n    const handleDatewiseForm = (e) => {\r\n        var getUsername = loginDetails.Username;\r\n    e.preventDefault();\r\n    axios\r\n        .get(`${urlpattern}DateWiseCountReportMaster?username=${getUsername}&ssd=${startdate}&eed=${enddate}`)\r\n\r\n        .then((response) => {\r\n           var setdatelist=response.data.Data;\r\n           setdatewise(setdatelist);\r\n        });\r\n};\r\nlet records = datewise || [];\r\n\r\n    const columns = [\r\n        {\r\n            dataField:'id',\r\n            text:'ID',\r\n            hidden: true\r\n        },\r\n        {\r\n            dataField: 'name',\r\n            text: 'Name.',\r\n            //sort: true,\r\n        },\r\n        {\r\n            dataField: 'submission',\r\n            text: 'Submission',\r\n            sort: true,\r\n        },\r\n        {\r\n            dataField: 'interview',\r\n            text: 'Interview',\r\n        },\r\n        {\r\n            dataField: 'offer',\r\n            text: 'Offer',\r\n        },\r\n        {\r\n            dataField: 'start',\r\n            text: 'Start',\r\n        }\r\n    ]\r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleDatewiseForm}>\r\n            <Row className=\"mt-3\">\r\n                            <Col md={3} className=\"\">\r\n                                    <input type=\"date\" className=\"form-control style-input\"\r\n                                    onChange={(event) => setstartdate(event.target.value)}/>\r\n                                </Col>   \r\n                                <Col md={3} className=\"\">\r\n                                    <input type=\"date\" className=\"form-control style-input\"\r\n                                    onChange={(event) => setenddate(event.target.value)}/>\r\n                                </Col>   \r\n                                <Col md={3} className=\"\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Search</button>\r\n                                </Col>                     \r\n                            </Row>\r\n            </form>\r\n            <Row>\r\n                <Col>\r\n                    <TableWithSearch records={records} columns={columns} />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Datewise;\r\n\r\n\r\n","import React, { useEffect,useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Row, Col, Input } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport $ from \"jquery\";\r\nimport config from '../../../helpers/baseurl';\r\n\r\n\r\nvar urlpattern =config.baseUrl;\r\nconst defaultSorted = [\r\n    {\r\n        dataField: 'id',\r\n        order: 'asc',\r\n    },\r\n];\r\n// /const { ExportCSVButton } = CSVExport;\r\nconst sizePerPageRenderer = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <React.Fragment>\r\n        <label className=\"d-inline mr-1\">Show</label>\r\n        <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"no-entries\"\r\n            className=\"custom-select custom-select-sm d-inline col-2\"\r\n            defaultValue={currSizePerPage}\r\n            onChange={(e) => onSizePerPageChange(e.target.value)}>\r\n            {options.map((option, idx) => {\r\n                return <option key={idx}>{option.text}</option>;\r\n            })}\r\n        </Input>\r\n        <label className=\"d-inline ml-1\">Entry</label>\r\n    </React.Fragment>\r\n);\r\n\r\nconst TableWithSearch = (props) => {\r\n    const { SearchBar } = Search;\r\n    //const dispatch = useDispatch();\r\n    const [rowData, setrowData] = useState([]);\r\n    //const [rowSelect, setrowSelect] = useState([]);\r\n    \r\n      const rowEvent = {\r\n        onDoubleClick: (row) => {\r\n            alert();\r\n                setrowData((rowData) => [...rowData, row]);\r\n                console.log(\"rowdata\", rowData)\r\n              \r\n        }\r\n    }\r\n    const NoDataIndication = () => (\r\n        <div className=\"spinner\">\r\n          <div className=\"rect1\" />\r\n          <div className=\"rect2\" />\r\n          <div className=\"rect3\" />\r\n          <div className=\"rect4\" />\r\n          <div className=\"rect5\" />\r\n        </div>\r\n      );\r\n    return (\r\n            \r\n                <ToolkitProvider bootstrap4 keyField=\"ROW_NUMBER\" data={props.records} columns={props.columns} search>\r\n                    {(props) => (\r\n                        <React.Fragment>\r\n                            <Row>\r\n                                <Col md={6} className=\"\">\r\n                                    <SearchBar {...props.searchProps} />\r\n                                </Col>                    \r\n                            </Row>\r\n                           \r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                bordered={false}\r\n                                defaultSorted={defaultSorted}\r\n                                rowEvents={rowEvent}\r\n                                noDataIndication={ () => <NoDataIndication /> }\r\n                                pagination={\r\n                                    paginationFactory( \r\n                                        { \r\n                                            sizePerPage: 10, \r\n                                            sizePerPageRenderer: sizePerPageRenderer, \r\n                                            sizePerPageList: [\r\n                                                { text: '10', value: 10, }, \r\n                                                { text: '20', value: 20 }, \r\n                                                { text: '50', value: 50 }, \r\n                                                { text: 'Todos', value: ( props.records ? props.records.length : 0 ) }\r\n                                            ] \r\n                                        } \r\n                                    )\r\n                                }\r\n                                \r\n                            />\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n    );\r\n};\r\n\r\nconst Monthcount = () => {\r\n\r\n    //const dispatch = useDispatch(); \r\n   //let records = useSelector((state) => state.Report.monthcountreport);\r\n  // console.log(records, 'join list');\r\n  const [monthrecord, setmonthRecord]=useState([]);\r\n   let loginDetails = useSelector((state)=> state.Auth.user || []);\r\n    useEffect(() => {\r\n        getMonthReport();\r\n\r\n        // eslint-disable-next-line \r\n    }, []);\r\n    const getMonthReport=()=>{\r\n        var getUsername = loginDetails.Username;\r\n        //alert(\"calling\");\r\n        $.ajax\r\n        ({\r\n             \r\n            url: `${urlpattern}MonthReport?username=${getUsername}`,\r\n            type:\"GET\",\r\n            dataType:\"JSON\",\r\n            \r\n            \r\n            success: function(data) \r\n            {\r\n               // debugger;\r\n                //console.log(\"log response on success\");\r\n                console.log(data, \"call records\");\r\n                var allmonthrecord = data.Data;\r\n                setmonthRecord(allmonthrecord);\r\n            }\r\n        });\r\n        \r\n    }\r\n    let records =monthrecord;\r\n    const columns = [\r\n        {\r\n            dataField:'id',\r\n            text:'ID',\r\n            hidden: true\r\n        },\r\n        {\r\n            dataField: 'name',\r\n            text: 'Name.',\r\n            //sort: true,\r\n        },\r\n        {\r\n            dataField: 'submission',\r\n            text: 'Submission',\r\n            sort: true,\r\n        },\r\n        {\r\n            dataField: 'interview',\r\n            text: 'Interview',\r\n        },\r\n        {\r\n            dataField: 'offer',\r\n            text: 'Offer',\r\n        },\r\n        {\r\n            dataField: 'start',\r\n            text: 'Start',\r\n        }\r\n    ]\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col>\r\n                    <TableWithSearch records={records} columns={columns} />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Monthcount;\r\n\r\n\r\n","import React, { useEffect,useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Row, Col, Input } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n//import { getTodayReportList } from '../../../redux/allreport/actions';\r\nimport $ from \"jquery\";\r\nimport config from '../../../helpers/baseurl';\r\n\r\n\r\nvar urlpattern =config.baseUrl;\r\n\r\n\r\n\r\nconst defaultSorted = [\r\n    {\r\n        dataField: 'id',\r\n        order: 'asc',\r\n    },\r\n];\r\n// /const { ExportCSVButton } = CSVExport;\r\nconst sizePerPageRenderer = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <React.Fragment>\r\n        <label className=\"d-inline mr-1\">Show</label>\r\n        <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"no-entries\"\r\n            className=\"custom-select custom-select-sm d-inline col-2\"\r\n            defaultValue={currSizePerPage}\r\n            onChange={(e) => onSizePerPageChange(e.target.value)}>\r\n            {options.map((option, idx) => {\r\n                return <option key={idx}>{option.text}</option>;\r\n            })}\r\n        </Input>\r\n        <label className=\"d-inline ml-1\">Entry</label>\r\n    </React.Fragment>\r\n);\r\n\r\nconst TableWithSearch = (props) => {\r\n    const { SearchBar } = Search;\r\n    //const dispatch = useDispatch();\r\n    const [rowData, setrowData] = useState([]);\r\n    //const [rowSelect, setrowSelect] = useState([]);\r\n    \r\n      const rowEvent = {\r\n        onDoubleClick: (row) => {\r\n            alert();\r\n                setrowData((rowData) => [...rowData, row]);\r\n                console.log(\"rowdata\", rowData)\r\n              \r\n        }\r\n    }\r\n    const NoDataIndication = () => (\r\n        <div className=\"spinner\">\r\n          <div className=\"rect1\" />\r\n          <div className=\"rect2\" />\r\n          <div className=\"rect3\" />\r\n          <div className=\"rect4\" />\r\n          <div className=\"rect5\" />\r\n        </div>\r\n      );\r\n    return (\r\n            \r\n                <ToolkitProvider bootstrap4 keyField=\"ROW_NUMBER\" data={props.records} columns={props.columns} search>\r\n                    {(props) => (\r\n                        <React.Fragment>\r\n                            <Row>\r\n                                <Col md={6} className=\"\">\r\n                                    <SearchBar {...props.searchProps} />\r\n                                </Col>                    \r\n                            </Row>\r\n                           \r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                bordered={false}\r\n                                defaultSorted={defaultSorted}\r\n                                rowEvents={rowEvent}\r\n                                noDataIndication={ () => <NoDataIndication /> }\r\n                                pagination={\r\n                                    paginationFactory( \r\n                                        { \r\n                                            sizePerPage: 10, \r\n                                            sizePerPageRenderer: sizePerPageRenderer, \r\n                                            sizePerPageList: [\r\n                                                { text: '10', value: 10, }, \r\n                                                { text: '20', value: 20 }, \r\n                                                { text: '50', value: 50 }, \r\n                                                { text: 'Todos', value: ( props.records ? props.records.length : 0 ) }\r\n                                            ] \r\n                                        } \r\n                                    )\r\n                                }\r\n                                \r\n                            />\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n    );\r\n};\r\n\r\nconst Todaycount = () => {\r\n\r\n    //const dispatch = useDispatch(); \r\n   //let records = useSelector((state) => state.Report.todayrepoert);\r\n  // console.log(records, 'join list');\r\n  const [todayrecord, settodayRecord]=useState([]);\r\n   let loginDetails = useSelector((state)=> state.Auth.user || []);\r\n    useEffect(() => {\r\n        getTodayReport();\r\n\r\n        // eslint-disable-next-line \r\n    }, []);\r\n    const getTodayReport=()=>{\r\n        var getUsername = loginDetails.Username;\r\n        //alert(\"calling\");\r\n        $.ajax\r\n        ({\r\n             \r\n            url: `${urlpattern}TodayReport?username=${getUsername}`,\r\n            type:\"GET\",\r\n            dataType:\"JSON\",\r\n            \r\n            \r\n            success: function(data) \r\n            {\r\n               // debugger;\r\n                //console.log(\"log response on success\");\r\n                console.log(data, \"call records\");\r\n                var alltodayrecord = data.Data;\r\n                settodayRecord(alltodayrecord);\r\n            }\r\n        });\r\n        \r\n    }\r\n    let records =todayrecord;\r\n    const columns = [\r\n        {\r\n            dataField:'id',\r\n            text:'ID',\r\n            hidden: true\r\n        },\r\n        {\r\n            dataField: 'name',\r\n            text: 'Name.',\r\n            //sort: true,\r\n        },\r\n        {\r\n            dataField: 'submission',\r\n            text: 'Submission',\r\n            sort: true,\r\n        },\r\n        {\r\n            dataField: 'interview',\r\n            text: 'Interview',\r\n        },\r\n        {\r\n            dataField: 'offer',\r\n            text: 'Offer',\r\n        },\r\n        {\r\n            dataField: 'start',\r\n            text: 'Start',\r\n        }\r\n    ]\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col>\r\n                    <TableWithSearch records={records} columns={columns} />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Todaycount;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink} from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport TeamLeadwise from './TeamLeadwise';\r\nimport Datewise from './Datewise';\r\nimport Monthcount from './Monthcount';\r\nimport Todaycount from './Todaycount';\r\n\r\nconst ClientReportNav = (props) => {\r\n  const [activeTab, setActiveTab] = useState('1');\r\n\r\n  const toggle = tab => {\r\n    if(activeTab !== tab) setActiveTab(tab);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Nav tabs className=\"second-level-tab nav nav-tabs justify-content-end\">\r\n        <NavItem >\r\n          <NavLink\r\n            className={classnames({ active: activeTab === '1' })}\r\n            onClick={() => { toggle('1'); }}\r\n          >\r\n            Team Leadwise\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem >\r\n          <NavLink\r\n            className={classnames({ active: activeTab === '2' })}\r\n            onClick={() => { toggle('2'); }}\r\n          >\r\n            Datewise\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem >\r\n          <NavLink\r\n            className={classnames({ active: activeTab === '3' })}\r\n            onClick={() => { toggle('3'); }}\r\n          >\r\n            Monthcount\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem >\r\n          <NavLink\r\n            className={classnames({ active: activeTab === '4' })}\r\n            onClick={() => { toggle('4'); }}\r\n          >\r\n            Today\r\n          </NavLink>\r\n        </NavItem>\r\n      </Nav>\r\n      <TabContent className=\"req-tab-content\" activeTab={activeTab}>\r\n        <TabPane tabId=\"1\">\r\n         \r\n             <TeamLeadwise/>\r\n        </TabPane>\r\n        <TabPane tabId=\"2\">\r\n         <Datewise/> \r\n        </TabPane>\r\n        <TabPane tabId=\"3\">\r\n         <Monthcount/>\r\n        </TabPane >\r\n        <TabPane tabId=\"4\">\r\n         <Todaycount/>\r\n        </TabPane >\r\n      </TabContent>\r\n      \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ClientReportNav;","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Row, Col, Input } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search,CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport {UncontrolledDropdown, DropdownMenu, DropdownToggle } from 'reactstrap';\r\nimport * as FeatherIcon from 'react-feather';\r\nimport { getReqReportList } from '../../redux/allreport/actions';\r\n//import EditRequirementmodal from './EditRequirementmodal';\r\nimport axios from 'axios';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n//import { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n//import PageTitle from '../../components/PageTitle';\r\n//import AddUserModal from '../user/AddUserModal';\r\n//import EditRequirementmodal from './EditRequirementmodal';\r\n\r\nconst defaultSorted = [\r\n    {\r\n        dataField: 'id',\r\n        order: 'asc',\r\n    },\r\n];\r\n\r\nconst { ExportCSVButton } = CSVExport;\r\nconst sizePerPageRenderer = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <React.Fragment>\r\n        <label className=\"d-inline mr-1\">Show</label>\r\n        <Input\r\n            type=\"select\"\r\n            name=\"select\"\r\n            id=\"no-entries\"\r\n            className=\"custom-select custom-select-sm d-inline col-2\"\r\n            defaultValue={currSizePerPage}\r\n            onChange={(e) => onSizePerPageChange(e.target.value)}>\r\n            {options.map((option, idx) => {\r\n                return <option key={idx}>{option.text}</option>;\r\n            })}\r\n        </Input>\r\n        <label className=\"d-inline ml-1\">Entry</label>\r\n    </React.Fragment>\r\n);\r\n\r\nconst TableWithSearch = (props) => {\r\n    const { SearchBar } = Search;\r\n    //const dispatch = useDispatch();\r\n\r\n    // const rowEvent = {\r\n    //     onClick: (e, row, rowIndex) => {\r\n    //       console.log(`clicked on row with index: ${rowIndex} ${row.jobcode}`);\r\n    //     }\r\n    //   };\r\n    const NoDataIndication = () => (\r\n        <div className=\"spinner\">\r\n          <div className=\"rect1\" />\r\n          <div className=\"rect2\" />\r\n          <div className=\"rect3\" />\r\n          <div className=\"rect4\" />\r\n          <div className=\"rect5\" />\r\n        </div>\r\n      );\r\n      const {\r\n        //buttonLabel,\r\n        className\r\n      } = props;\r\n    \r\n      const [modal, setModal] = useState(false);\r\n      const [file, setFile] = useState(null);\r\n      const toggle = () => setModal(!modal);\r\n      const UPLOAD_ENDPOINT =\r\n      \"http://144.48.250.235:98/api/UploadFile\";\r\n  \r\n    const handleSubmit = async e => {\r\n      e.preventDefault();\r\n      //if await is removed, console log will be called before the uploadFile() is executed completely.\r\n      //since the await is added, this will pause here then console log will be called\r\n      let res = await uploadFile(file);\r\n      console.log(res.data);\r\n    };\r\n  \r\n    const uploadFile = async file => {\r\n      const formData = new FormData();\r\n      formData.append(\"avatar\", file);\r\n  \r\n      return await axios.post(UPLOAD_ENDPOINT, formData, {\r\n        headers: {\r\n          \"content-type\": \"multipart/form-data\"\r\n        }\r\n      });\r\n    };\r\n  \r\n    const handleOnChange = e => {\r\n      console.log(e.target.files[0]);\r\n      setFile(e.target.files[0]);\r\n    };\r\n    return (\r\n            \r\n                <ToolkitProvider bootstrap4 keyField=\"ROW_NUMBER\" data={props.records} columns={props.columns} search>\r\n                    {(props) => (\r\n                        <React.Fragment>\r\n                            <Row>\r\n                                \r\n                                <Col md={6} className=\"\">\r\n                                    <SearchBar {...props.searchProps} />\r\n                                </Col>    \r\n                                <Col md={6} className=\"text-right\">\r\n                                <UncontrolledDropdown className=\" profile-dropdown-menu\">\r\n                                <button className=\"btn btn-secondary bg-secondary upbtn  mr-0\" onClick={toggle}>Upload New</button>\r\n                <DropdownToggle\r\n                    data-toggle=\"dropdown\"\r\n                    tag=\"button\"\r\n                    className=\"btn btn-secondary dropdown-toggle bg-secondary  mr-0\">\r\n                    Download <FeatherIcon.ChevronDown />\r\n                </DropdownToggle>\r\n                <DropdownMenu right className=\"topbar-dropdown-menu profile-dropdown-items\">\r\n                    <div className=\"dropdown-item notify-item p1\">\r\n                    <ExportCSVButton className=\"btn-link\" { ...props.csvProps }>Export CSV</ExportCSVButton>\r\n                    </div>\r\n                    {/* <div  className=\"dropdown-item notify-item p1\">\r\n                    <ExportCSVButton className=\"btn-link\" { ...props.csvProps }>Export PDF</ExportCSVButton>\r\n                    </div>\r\n                    <div  className=\"dropdown-item notify-item p1\">\r\n                    <ExportCSVButton className=\"btn-link\" { ...props.csvProps }>Export EXCEL</ExportCSVButton>\r\n                    </div> */}\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n            <Modal isOpen={modal} toggle={toggle} className={className}>\r\n            <form onSubmit={handleSubmit}>\r\n                        <ModalHeader toggle={toggle}>Upload </ModalHeader>\r\n                        <ModalBody>\r\n                          <Row>\r\n                            <input type=\"file\" className=\"form-control\" onChange={handleOnChange} />\r\n                         </Row>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                        <Button color=\"primary\" type=\"submit\">Upload File</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n                    </Modal>\r\n                                {/* <ExportCSVButton className=\"btn-primary\" { ...props.csvProps }>Export CSV!!</ExportCSVButton> */}\r\n                                </Col>                            \r\n                            </Row>\r\n                            {/* <EditRequirementmodal modalToggle={toggle}/> */}\r\n                            <div class=\"table-responsive\">\r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                bordered={false}\r\n                                defaultSorted={defaultSorted}\r\n                                //rowEvents={rowEvent}\r\n                                noDataIndication={ () => <NoDataIndication /> }\r\n                                pagination={\r\n                                    paginationFactory( \r\n                                        { \r\n                                            sizePerPage: 10, \r\n                                            sizePerPageRenderer: sizePerPageRenderer, \r\n                                            sizePerPageList: [\r\n                                                { text: '10', value: 10, }, \r\n                                                { text: '20', value: 20 }, \r\n                                                { text: '50', value: 50 }, \r\n                                                { text: 'Todos', value: ( props.records ? props.records.length : 0 ) }\r\n                                            ] \r\n                                        } \r\n                                    )\r\n                                }\r\n                                \r\n                            /></div>\r\n                        </React.Fragment>\r\n                    )}\r\n                  \r\n                </ToolkitProvider>\r\n    );\r\n};\r\n\r\nconst ViewRequirement = (props) => {\r\n    \r\n    const dispatch = useDispatch(); \r\n   let records = useSelector((state) => state.Report.reqreport);\r\n   console.log(records, 'requirement')\r\n    useEffect(() => {\r\n        dispatch(getReqReportList());\r\n\r\n        // eslint-disable-next-line \r\n    }, []);\r\n   \r\n    const columns = [\r\n        {\r\n            dataField: 'jobcode',\r\n            text: 'Job Code.',\r\n        },\r\n        {\r\n            dataField:'client',\r\n            text:\"Client Name\"\r\n        },\r\n        {\r\n            dataField: 'skill',\r\n            text: 'Skill',\r\n        },\r\n        {\r\n            dataField: 'position',\r\n            text: 'Position',\r\n        },\r\n        {\r\n            dataField: 'location',\r\n            text: 'Location',\r\n        },\r\n        {\r\n            dataField: 'type',\r\n            text: 'Type',\r\n        },\r\n        {\r\n            dataField: 'status',\r\n            text: 'Status',\r\n        },\r\n        {\r\n            dataField: 'createdon',\r\n            text: 'Created On',\r\n        },\r\n        {\r\n            dataField: 'submission',\r\n            text: 'Submission',\r\n        },  \r\n        {\r\n            dataField: 'interview',\r\n            text: 'Interview',\r\n        },\r\n        {\r\n            dataField: 'offer',\r\n            text: 'Offer',\r\n        },\r\n        {\r\n            dataField: 'hire',\r\n            text: 'Hire',\r\n        },\r\n        {\r\n            dataField: 'bd',\r\n            text: 'BD',\r\n        },\r\n    ]\r\n        return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col>\r\n                {/* <EditRequirementmodal/> */}\r\n               \r\n                    <TableWithSearch records={records} columns={columns} />\r\n                </Col>\r\n            </Row>\r\n            \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ViewRequirement;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Button,  Row, Col } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport PageTitle from '../../components/PageTitle';\r\nimport Revenureport from './revenureport/Revenureport';\r\nimport ClientReportNav from './clientreport/ClientReportNav';\r\nimport ViewRequirement from './ViewRequirement';\r\nconst Report = (props) => {\r\n  const [activeTab, setActiveTab] = useState('1');\r\n\r\n  const toggle = tab => {\r\n    if(activeTab !== tab) setActiveTab(tab);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row className=\"page-title\">\r\n                <Col md={6}>\r\n                    <PageTitle\r\n                        breadCrumbItems={[\r\n                            { label: 'Report', path: '/report', active: true },\r\n                        ]}\r\n                    />\r\n                </Col>\r\n                <Col md={6} className=\"text-right\">\r\n                <Button color=\"primary\"><i className=\"uil uil-plus\"></i>ADD ITEM</Button>\r\n                </Col>\r\n            </Row>\r\n      <Nav tabs className=\"requirement-tab pt-3 pb-3 nav nav-tabs row bg-white\">\r\n        <NavItem className=\"col-sm-4\">\r\n          <NavLink\r\n            className={classnames({ active: activeTab === '1' })}\r\n            onClick={() => { toggle('1'); }}\r\n          >\r\n            Client Report\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem className=\"col-sm-4\">\r\n          <NavLink\r\n            className={classnames({ active: activeTab === '2' })}\r\n            onClick={() => { toggle('2'); }}\r\n          >\r\n            Revenue\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem className=\"col-sm-4\">\r\n          <NavLink\r\n            className={classnames({ active: activeTab === '3' })}\r\n            onClick={() => { toggle('3'); }}\r\n          >\r\n            Requirement\r\n          </NavLink>\r\n        </NavItem>\r\n      </Nav>\r\n      <TabContent className=\"req-tab-content\" activeTab={activeTab}>\r\n        <TabPane tabId=\"1\">\r\n         \r\n             <ClientReportNav/>\r\n        </TabPane>\r\n        <TabPane tabId=\"2\">\r\n         <Revenureport/>\r\n        </TabPane>\r\n        <TabPane tabId=\"3\">\r\n          <ViewRequirement/>\r\n        </TabPane >\r\n      </TabContent>\r\n      \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Report;"],"sourceRoot":""}